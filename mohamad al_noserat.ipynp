{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Machine Learning - Full Exersise 2021"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 0 - Setup"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Import pckgs "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "## for data\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import math\n",
    "\n",
    "## for plotting\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import itertools\n",
    "\n",
    "## for statistical tests\n",
    "import scipy\n",
    "\n",
    "## for machine learning\n",
    "from sklearn import preprocessing, impute, utils, linear_model, feature_selection, model_selection, metrics, ensemble"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Import data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dtf = pd.read_csv('data_titanic.csv')\n",
    "dtf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Y</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Moran, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330877</td>\n",
       "      <td>8.4583</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>McCarthy, Mr. Timothy J</td>\n",
       "      <td>male</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>17463</td>\n",
       "      <td>51.8625</td>\n",
       "      <td>E46</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Palsson, Master. Gosta Leonard</td>\n",
       "      <td>male</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>349909</td>\n",
       "      <td>21.0750</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)</td>\n",
       "      <td>female</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>347742</td>\n",
       "      <td>11.1333</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Nasser, Mrs. Nicholas (Adele Achem)</td>\n",
       "      <td>female</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>237736</td>\n",
       "      <td>30.0708</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Sandstrom, Miss. Marguerite Rut</td>\n",
       "      <td>female</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>PP 9549</td>\n",
       "      <td>16.7000</td>\n",
       "      <td>G6</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Bonnell, Miss. Elizabeth</td>\n",
       "      <td>female</td>\n",
       "      <td>58.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>113783</td>\n",
       "      <td>26.5500</td>\n",
       "      <td>C103</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Saundercock, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5. 2151</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Andersson, Mr. Anders Johan</td>\n",
       "      <td>male</td>\n",
       "      <td>39.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>347082</td>\n",
       "      <td>31.2750</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Vestrom, Miss. Hulda Amanda Adolfina</td>\n",
       "      <td>female</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>350406</td>\n",
       "      <td>7.8542</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Hewlett, Mrs. (Mary D Kingcome)</td>\n",
       "      <td>female</td>\n",
       "      <td>55.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>248706</td>\n",
       "      <td>16.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Rice, Master. Eugene</td>\n",
       "      <td>male</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>382652</td>\n",
       "      <td>29.1250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Williams, Mr. Charles Eugene</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>244373</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Vander Planke, Mrs. Julius (Emelia Maria Vande...</td>\n",
       "      <td>female</td>\n",
       "      <td>31.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>345763</td>\n",
       "      <td>18.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Masselmani, Mrs. Fatima</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2649</td>\n",
       "      <td>7.2250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Fynney, Mr. Joseph J</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>239865</td>\n",
       "      <td>26.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Beesley, Mr. Lawrence</td>\n",
       "      <td>male</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>248698</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>D56</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>McGowan, Miss. Anna \"Annie\"</td>\n",
       "      <td>female</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330923</td>\n",
       "      <td>8.0292</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Sloper, Mr. William Thompson</td>\n",
       "      <td>male</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>113788</td>\n",
       "      <td>35.5000</td>\n",
       "      <td>A6</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Palsson, Miss. Torborg Danira</td>\n",
       "      <td>female</td>\n",
       "      <td>8.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>349909</td>\n",
       "      <td>21.0750</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Asplund, Mrs. Carl Oscar (Selma Augusta Emilia...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>347077</td>\n",
       "      <td>31.3875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Emir, Mr. Farred Chehab</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2631</td>\n",
       "      <td>7.2250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Fortune, Mr. Charles Alexander</td>\n",
       "      <td>male</td>\n",
       "      <td>19.0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>19950</td>\n",
       "      <td>263.0000</td>\n",
       "      <td>C23 C25 C27</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>O'Dwyer, Miss. Ellen \"Nellie\"</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330959</td>\n",
       "      <td>7.8792</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Todoroff, Mr. Lalio</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>349216</td>\n",
       "      <td>7.8958</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>862</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Giles, Mr. Frederick Edward</td>\n",
       "      <td>male</td>\n",
       "      <td>21.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>28134</td>\n",
       "      <td>11.5000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>863</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Swift, Mrs. Frederick Joel (Margaret Welles Ba...</td>\n",
       "      <td>female</td>\n",
       "      <td>48.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>17466</td>\n",
       "      <td>25.9292</td>\n",
       "      <td>D17</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>864</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Sage, Miss. Dorothy Edith \"Dolly\"</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>CA. 2343</td>\n",
       "      <td>69.5500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>865</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Gill, Mr. John William</td>\n",
       "      <td>male</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>233866</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>866</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Bystrom, Mrs. (Karolina)</td>\n",
       "      <td>female</td>\n",
       "      <td>42.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>236852</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>867</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Duran y More, Miss. Asuncion</td>\n",
       "      <td>female</td>\n",
       "      <td>27.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>SC/PARIS 2149</td>\n",
       "      <td>13.8583</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>868</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Roebling, Mr. Washington Augustus II</td>\n",
       "      <td>male</td>\n",
       "      <td>31.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17590</td>\n",
       "      <td>50.4958</td>\n",
       "      <td>A24</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>869</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>van Melkebeke, Mr. Philemon</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>345777</td>\n",
       "      <td>9.5000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>870</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnson, Master. Harold Theodor</td>\n",
       "      <td>male</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>347742</td>\n",
       "      <td>11.1333</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>871</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Balkic, Mr. Cerin</td>\n",
       "      <td>male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>349248</td>\n",
       "      <td>7.8958</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>872</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Beckwith, Mrs. Richard Leonard (Sallie Monypeny)</td>\n",
       "      <td>female</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>11751</td>\n",
       "      <td>52.5542</td>\n",
       "      <td>D35</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>873</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Carlsson, Mr. Frans Olof</td>\n",
       "      <td>male</td>\n",
       "      <td>33.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>695</td>\n",
       "      <td>5.0000</td>\n",
       "      <td>B51 B53 B55</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>874</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Vander Cruyssen, Mr. Victor</td>\n",
       "      <td>male</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>345765</td>\n",
       "      <td>9.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>875</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Abelson, Mrs. Samuel (Hannah Wizosky)</td>\n",
       "      <td>female</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>P/PP 3381</td>\n",
       "      <td>24.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>876</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Najib, Miss. Adele Kiamie \"Jane\"</td>\n",
       "      <td>female</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2667</td>\n",
       "      <td>7.2250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>877</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Gustafsson, Mr. Alfred Ossian</td>\n",
       "      <td>male</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7534</td>\n",
       "      <td>9.8458</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>878</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Petroff, Mr. Nedelio</td>\n",
       "      <td>male</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>349212</td>\n",
       "      <td>7.8958</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>879</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Laleff, Mr. Kristo</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>349217</td>\n",
       "      <td>7.8958</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>880</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Potter, Mrs. Thomas Jr (Lily Alexenia Wilson)</td>\n",
       "      <td>female</td>\n",
       "      <td>56.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>11767</td>\n",
       "      <td>83.1583</td>\n",
       "      <td>C50</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>881</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Shelley, Mrs. William (Imanita Parrish Hall)</td>\n",
       "      <td>female</td>\n",
       "      <td>25.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>230433</td>\n",
       "      <td>26.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>882</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Markun, Mr. Johann</td>\n",
       "      <td>male</td>\n",
       "      <td>33.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>349257</td>\n",
       "      <td>7.8958</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>883</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Dahlberg, Miss. Gerda Ulrika</td>\n",
       "      <td>female</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7552</td>\n",
       "      <td>10.5167</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>884</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Banfield, Mr. Frederick James</td>\n",
       "      <td>male</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>C.A./SOTON 34068</td>\n",
       "      <td>10.5000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>885</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Sutehall, Mr. Henry Jr</td>\n",
       "      <td>male</td>\n",
       "      <td>25.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>SOTON/OQ 392076</td>\n",
       "      <td>7.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Rice, Mrs. William (Margaret Norton)</td>\n",
       "      <td>female</td>\n",
       "      <td>39.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>382652</td>\n",
       "      <td>29.1250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Montvila, Rev. Juozas</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>211536</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Graham, Miss. Margaret Edith</td>\n",
       "      <td>female</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>112053</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>B42</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>W./C. 6607</td>\n",
       "      <td>23.4500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Behr, Mr. Karl Howell</td>\n",
       "      <td>male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>111369</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>C148</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>891</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Dooley, Mr. Patrick</td>\n",
       "      <td>male</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>370376</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             Y  Pclass                                               Name  \\\n",
       "PassengerId                                                                 \n",
       "1            0       3                            Braund, Mr. Owen Harris   \n",
       "2            1       1  Cumings, Mrs. John Bradley (Florence Briggs Th...   \n",
       "3            1       3                             Heikkinen, Miss. Laina   \n",
       "4            1       1       Futrelle, Mrs. Jacques Heath (Lily May Peel)   \n",
       "5            0       3                           Allen, Mr. William Henry   \n",
       "6            0       3                                   Moran, Mr. James   \n",
       "7            0       1                            McCarthy, Mr. Timothy J   \n",
       "8            0       3                     Palsson, Master. Gosta Leonard   \n",
       "9            1       3  Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)   \n",
       "10           1       2                Nasser, Mrs. Nicholas (Adele Achem)   \n",
       "11           1       3                    Sandstrom, Miss. Marguerite Rut   \n",
       "12           1       1                           Bonnell, Miss. Elizabeth   \n",
       "13           0       3                     Saundercock, Mr. William Henry   \n",
       "14           0       3                        Andersson, Mr. Anders Johan   \n",
       "15           0       3               Vestrom, Miss. Hulda Amanda Adolfina   \n",
       "16           1       2                   Hewlett, Mrs. (Mary D Kingcome)    \n",
       "17           0       3                               Rice, Master. Eugene   \n",
       "18           1       2                       Williams, Mr. Charles Eugene   \n",
       "19           0       3  Vander Planke, Mrs. Julius (Emelia Maria Vande...   \n",
       "20           1       3                            Masselmani, Mrs. Fatima   \n",
       "21           0       2                               Fynney, Mr. Joseph J   \n",
       "22           1       2                              Beesley, Mr. Lawrence   \n",
       "23           1       3                        McGowan, Miss. Anna \"Annie\"   \n",
       "24           1       1                       Sloper, Mr. William Thompson   \n",
       "25           0       3                      Palsson, Miss. Torborg Danira   \n",
       "26           1       3  Asplund, Mrs. Carl Oscar (Selma Augusta Emilia...   \n",
       "27           0       3                            Emir, Mr. Farred Chehab   \n",
       "28           0       1                     Fortune, Mr. Charles Alexander   \n",
       "29           1       3                      O'Dwyer, Miss. Ellen \"Nellie\"   \n",
       "30           0       3                                Todoroff, Mr. Lalio   \n",
       "...         ..     ...                                                ...   \n",
       "862          0       2                        Giles, Mr. Frederick Edward   \n",
       "863          1       1  Swift, Mrs. Frederick Joel (Margaret Welles Ba...   \n",
       "864          0       3                  Sage, Miss. Dorothy Edith \"Dolly\"   \n",
       "865          0       2                             Gill, Mr. John William   \n",
       "866          1       2                           Bystrom, Mrs. (Karolina)   \n",
       "867          1       2                       Duran y More, Miss. Asuncion   \n",
       "868          0       1               Roebling, Mr. Washington Augustus II   \n",
       "869          0       3                        van Melkebeke, Mr. Philemon   \n",
       "870          1       3                    Johnson, Master. Harold Theodor   \n",
       "871          0       3                                  Balkic, Mr. Cerin   \n",
       "872          1       1   Beckwith, Mrs. Richard Leonard (Sallie Monypeny)   \n",
       "873          0       1                           Carlsson, Mr. Frans Olof   \n",
       "874          0       3                        Vander Cruyssen, Mr. Victor   \n",
       "875          1       2              Abelson, Mrs. Samuel (Hannah Wizosky)   \n",
       "876          1       3                   Najib, Miss. Adele Kiamie \"Jane\"   \n",
       "877          0       3                      Gustafsson, Mr. Alfred Ossian   \n",
       "878          0       3                               Petroff, Mr. Nedelio   \n",
       "879          0       3                                 Laleff, Mr. Kristo   \n",
       "880          1       1      Potter, Mrs. Thomas Jr (Lily Alexenia Wilson)   \n",
       "881          1       2       Shelley, Mrs. William (Imanita Parrish Hall)   \n",
       "882          0       3                                 Markun, Mr. Johann   \n",
       "883          0       3                       Dahlberg, Miss. Gerda Ulrika   \n",
       "884          0       2                      Banfield, Mr. Frederick James   \n",
       "885          0       3                             Sutehall, Mr. Henry Jr   \n",
       "886          0       3               Rice, Mrs. William (Margaret Norton)   \n",
       "887          0       2                              Montvila, Rev. Juozas   \n",
       "888          1       1                       Graham, Miss. Margaret Edith   \n",
       "889          0       3           Johnston, Miss. Catherine Helen \"Carrie\"   \n",
       "890          1       1                              Behr, Mr. Karl Howell   \n",
       "891          0       3                                Dooley, Mr. Patrick   \n",
       "\n",
       "                Sex   Age  SibSp  Parch            Ticket      Fare  \\\n",
       "PassengerId                                                           \n",
       "1              male  22.0      1      0         A/5 21171    7.2500   \n",
       "2            female  38.0      1      0          PC 17599   71.2833   \n",
       "3            female  26.0      0      0  STON/O2. 3101282    7.9250   \n",
       "4            female  35.0      1      0            113803   53.1000   \n",
       "5              male  35.0      0      0            373450    8.0500   \n",
       "6              male   NaN      0      0            330877    8.4583   \n",
       "7              male  54.0      0      0             17463   51.8625   \n",
       "8              male   2.0      3      1            349909   21.0750   \n",
       "9            female  27.0      0      2            347742   11.1333   \n",
       "10           female  14.0      1      0            237736   30.0708   \n",
       "11           female   4.0      1      1           PP 9549   16.7000   \n",
       "12           female  58.0      0      0            113783   26.5500   \n",
       "13             male  20.0      0      0         A/5. 2151    8.0500   \n",
       "14             male  39.0      1      5            347082   31.2750   \n",
       "15           female  14.0      0      0            350406    7.8542   \n",
       "16           female  55.0      0      0            248706   16.0000   \n",
       "17             male   2.0      4      1            382652   29.1250   \n",
       "18             male   NaN      0      0            244373   13.0000   \n",
       "19           female  31.0      1      0            345763   18.0000   \n",
       "20           female   NaN      0      0              2649    7.2250   \n",
       "21             male  35.0      0      0            239865   26.0000   \n",
       "22             male  34.0      0      0            248698   13.0000   \n",
       "23           female  15.0      0      0            330923    8.0292   \n",
       "24             male  28.0      0      0            113788   35.5000   \n",
       "25           female   8.0      3      1            349909   21.0750   \n",
       "26           female  38.0      1      5            347077   31.3875   \n",
       "27             male   NaN      0      0              2631    7.2250   \n",
       "28             male  19.0      3      2             19950  263.0000   \n",
       "29           female   NaN      0      0            330959    7.8792   \n",
       "30             male   NaN      0      0            349216    7.8958   \n",
       "...             ...   ...    ...    ...               ...       ...   \n",
       "862            male  21.0      1      0             28134   11.5000   \n",
       "863          female  48.0      0      0             17466   25.9292   \n",
       "864          female   NaN      8      2          CA. 2343   69.5500   \n",
       "865            male  24.0      0      0            233866   13.0000   \n",
       "866          female  42.0      0      0            236852   13.0000   \n",
       "867          female  27.0      1      0     SC/PARIS 2149   13.8583   \n",
       "868            male  31.0      0      0          PC 17590   50.4958   \n",
       "869            male   NaN      0      0            345777    9.5000   \n",
       "870            male   4.0      1      1            347742   11.1333   \n",
       "871            male  26.0      0      0            349248    7.8958   \n",
       "872          female  47.0      1      1             11751   52.5542   \n",
       "873            male  33.0      0      0               695    5.0000   \n",
       "874            male  47.0      0      0            345765    9.0000   \n",
       "875          female  28.0      1      0         P/PP 3381   24.0000   \n",
       "876          female  15.0      0      0              2667    7.2250   \n",
       "877            male  20.0      0      0              7534    9.8458   \n",
       "878            male  19.0      0      0            349212    7.8958   \n",
       "879            male   NaN      0      0            349217    7.8958   \n",
       "880          female  56.0      0      1             11767   83.1583   \n",
       "881          female  25.0      0      1            230433   26.0000   \n",
       "882            male  33.0      0      0            349257    7.8958   \n",
       "883          female  22.0      0      0              7552   10.5167   \n",
       "884            male  28.0      0      0  C.A./SOTON 34068   10.5000   \n",
       "885            male  25.0      0      0   SOTON/OQ 392076    7.0500   \n",
       "886          female  39.0      0      5            382652   29.1250   \n",
       "887            male  27.0      0      0            211536   13.0000   \n",
       "888          female  19.0      0      0            112053   30.0000   \n",
       "889          female   NaN      1      2        W./C. 6607   23.4500   \n",
       "890            male  26.0      0      0            111369   30.0000   \n",
       "891            male  32.0      0      0            370376    7.7500   \n",
       "\n",
       "                   Cabin Embarked  \n",
       "PassengerId                        \n",
       "1                    NaN        S  \n",
       "2                    C85        C  \n",
       "3                    NaN        S  \n",
       "4                   C123        S  \n",
       "5                    NaN        S  \n",
       "6                    NaN        Q  \n",
       "7                    E46        S  \n",
       "8                    NaN        S  \n",
       "9                    NaN        S  \n",
       "10                   NaN        C  \n",
       "11                    G6        S  \n",
       "12                  C103        S  \n",
       "13                   NaN        S  \n",
       "14                   NaN        S  \n",
       "15                   NaN        S  \n",
       "16                   NaN        S  \n",
       "17                   NaN        Q  \n",
       "18                   NaN        S  \n",
       "19                   NaN        S  \n",
       "20                   NaN        C  \n",
       "21                   NaN        S  \n",
       "22                   D56        S  \n",
       "23                   NaN        Q  \n",
       "24                    A6        S  \n",
       "25                   NaN        S  \n",
       "26                   NaN        S  \n",
       "27                   NaN        C  \n",
       "28           C23 C25 C27        S  \n",
       "29                   NaN        Q  \n",
       "30                   NaN        S  \n",
       "...                  ...      ...  \n",
       "862                  NaN        S  \n",
       "863                  D17        S  \n",
       "864                  NaN        S  \n",
       "865                  NaN        S  \n",
       "866                  NaN        S  \n",
       "867                  NaN        C  \n",
       "868                  A24        S  \n",
       "869                  NaN        S  \n",
       "870                  NaN        S  \n",
       "871                  NaN        S  \n",
       "872                  D35        S  \n",
       "873          B51 B53 B55        S  \n",
       "874                  NaN        S  \n",
       "875                  NaN        C  \n",
       "876                  NaN        C  \n",
       "877                  NaN        S  \n",
       "878                  NaN        S  \n",
       "879                  NaN        S  \n",
       "880                  C50        C  \n",
       "881                  NaN        S  \n",
       "882                  NaN        S  \n",
       "883                  NaN        S  \n",
       "884                  NaN        S  \n",
       "885                  NaN        S  \n",
       "886                  NaN        Q  \n",
       "887                  NaN        S  \n",
       "888                  B42        S  \n",
       "889                  NaN        S  \n",
       "890                 C148        C  \n",
       "891                  NaN        Q  \n",
       "\n",
       "[891 rows x 11 columns]"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dtf = dtf.set_index(\"PassengerId\")\n",
    "dtf = dtf.rename(columns={\"Survived\":\"Y\"})\n",
    "dtf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1 - Data Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data description:\n",
    "\n",
    "Survival - Survival (0 = No; 1 = Yes).\n",
    "Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd)\n",
    "Name - Name\n",
    "Sex - Sex\n",
    "Age - Age\n",
    "Sibsp - Number of Siblings/Spouses Aboard\n",
    "Parch - Number of Parents/Children Aboard\n",
    "Ticket - Ticket Number\n",
    "Fare - Passenger Fare\n",
    "Cabin - Cabin\n",
    "Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton)\n",
    "\n",
    "Let's start by getting an overview of the whole dataset, in particular we want to know how many categorical and numerical variables there are and the proportion of missing data. Recognizing a variable’s type sometimes can be tricky because categories can be expressed as numbers (the Survived column is made of 1s and 0s)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 891 entries, 1 to 891\n",
      "Data columns (total 11 columns):\n",
      "Y           891 non-null int64\n",
      "Pclass      891 non-null int64\n",
      "Name        891 non-null object\n",
      "Sex         891 non-null object\n",
      "Age         714 non-null float64\n",
      "SibSp       891 non-null int64\n",
      "Parch       891 non-null int64\n",
      "Ticket      891 non-null object\n",
      "Fare        891 non-null float64\n",
      "Cabin       204 non-null object\n",
      "Embarked    889 non-null object\n",
      "dtypes: float64(2), int64(4), object(5)\n",
      "memory usage: 83.5+ KB\n"
     ]
    }
   ],
   "source": [
    "features = []\n",
    "dtf.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following function is very useful and can be used in several occasions. To give an illustration I’ll plot a heatmap of the dataframe to visualize columns type and missing data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1;37;40m Categerocial  \u001b[1;30;41m Numeric  \u001b[1;30;47m NaN \n"
     ]
    }
   ],
   "source": [
    "'''\n",
    "Recognize whether a column is numerical or categorical.\n",
    ":parameter\n",
    "    :param dtf: dataframe - input data\n",
    "    :param col: str - name of the column to analyze\n",
    "    :param max_cat: num - max number of unique values to recognize a column as categorical\n",
    ":return\n",
    "    \"cat\" if the column is categorical or \"num\" otherwise\n",
    "'''\n",
    "def utils_recognize_type(dtf, col, max_cat=20):\n",
    "    if (dtf[col].dtype == \"O\") | (dtf[col].nunique() < max_cat):\n",
    "        return \"cat\"\n",
    "    else:\n",
    "        return \"num\"\n",
    "dic_cols = {col:utils_recognize_type(dtf, col, max_cat=20) for col in dtf.columns}\n",
    "heatmap = dtf.isnull()\n",
    "for k,v in dic_cols.items():\n",
    " if v == \"num\":\n",
    "   heatmap[k] = heatmap[k].apply(lambda x: 0.5 if x is False else 1)\n",
    " else:\n",
    "   heatmap[k] = heatmap[k].apply(lambda x: 0 if x is False else 1)\n",
    "sns.heatmap(heatmap, cbar=False).set_title('Dataset Overview')\n",
    "plt.show()\n",
    "print(\"\\033[1;37;40m Categerocial \", \"\\033[1;30;41m Numeric \", \"\\033[1;30;47m NaN \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1080 with 11 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(20,15))\n",
    "cols = 4\n",
    "rows = math.ceil(float(dtf.shape[1]) / cols)\n",
    "for i, column in enumerate(dtf.columns):\n",
    "    ax = fig.add_subplot(rows, cols, i + 1)\n",
    "    ax.set_title(column)\n",
    "    if dtf.dtypes[column] == np.object:\n",
    "        dtf[column].value_counts().plot(kind=\"bar\", axes=ax)\n",
    "    else:\n",
    "        dtf[column].hist(axes=ax)\n",
    "        plt.xticks(rotation=\"vertical\")\n",
    "plt.subplots_adjust(hspace=0.7, wspace=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x223d46776d8>"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(y='Sex', hue='Y', data=dtf,)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Do they apply \"Save women and children first\" ?  Explain your answer\n",
    "make the same analysis done above on these features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Y             0\n",
      "Pclass        0\n",
      "Name          0\n",
      "Sex           0\n",
      "Age         177\n",
      "SibSp         0\n",
      "Parch         0\n",
      "Ticket        0\n",
      "Fare          0\n",
      "Cabin       687\n",
      "Embarked      2\n",
      "dtype: int64\n",
      "--------after----------\n",
      "Y             0\n",
      "Pclass        0\n",
      "Name          0\n",
      "Sex           0\n",
      "Age         177\n",
      "SibSp         0\n",
      "Parch         0\n",
      "Ticket        0\n",
      "Fare          0\n",
      "Cabin       687\n",
      "Embarked      0\n",
      "dtype: int64\n",
      "['Mr' 'Mrs' 'Miss' 'Master' 'Don' 'Rev' 'Dr' 'Mme' 'Ms' 'Major' 'Lady'\n",
      " 'Sir' 'Mlle' 'Col' 'Capt' 'the Countess' 'Jonkheer']\n",
      "length of tiles 17\n"
     ]
    }
   ],
   "source": [
    "# first we gonna fill the null values\n",
    "print (pd.isnull(dtf).sum())\n",
    "dtf = dtf.fillna({\"Embarked\": \"S\"})#because S is the most common\n",
    "print('--------after----------')\n",
    "print (pd.isnull(dtf).sum())\n",
    "# now we gonna try to fill the age null values using the Name feature\n",
    "dtf['Name'] = dtf['Name'].map(lambda x: x.split(',')[1].split('.')[0].strip())\n",
    "titles = dtf['Name'].unique()\n",
    "print(titles)\n",
    "print(f'length of tiles {len(titles)}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Y             0\n",
      "Pclass        0\n",
      "Name          0\n",
      "Sex           0\n",
      "Age           0\n",
      "SibSp         0\n",
      "Parch         0\n",
      "Ticket        0\n",
      "Fare          0\n",
      "Cabin       687\n",
      "Embarked      0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# the best soloution is to calculate the median for each name-prefix from the 17 above \n",
    "# and but in the age column\n",
    "dtf['Age'].fillna(-1, inplace=True)\n",
    "medians = dict()\n",
    "for title in titles:\n",
    "    median = dtf.Age[(dtf[\"Age\"] != -1) & (dtf['Name'] == title)].median()\n",
    "    medians[title] = median\n",
    "    \n",
    "for index, row in dtf.iterrows():\n",
    "    if row['Age'] == -1:\n",
    "        dtf.loc[index, 'Age'] = medians[row['Name']]\n",
    "print (pd.isnull(dtf).sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [],
   "source": [
    "# YOUR CODE HERE .. \n",
    "\n",
    "# add feature to check if the passenger is child or adult\n",
    "lis=[]\n",
    "for item in dtf['Age']:\n",
    "    if(item >18):\n",
    "        lis.append(0)\n",
    "    else:\n",
    "        lis.append(1)\n",
    "dtf['isChild'] =lis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x223d5e4f5f8>"
      ]
     },
     "execution_count": 173,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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NgAAR6/MEcA9khaWuH4AwLtQWgBExL9LeqWs9QMA3p1JVRdge4WkFZJ00vFdemDq6oorOjov3LJaJ9+4ueoyAGDMKj8IHBF3RUR/RPRPmzKx6nIAII3KRwAAULW33npLQ0ND2rdvX9WlHFJPT49qtZq6urpatk4CAEB6Q0NDmjp1qvr6+mS76nLeISK0d+9eDQ0Nafbs2S1bb5mnga6R9J+Sfs/2kO3lZW0LAN6Nffv2qbe3tyM//CXJtnp7e1s+QiltBBARS8paNwC0Wqd++I8oo77KDwIDAKpBAABAi0SE5s+fr/Xr1+9vu//++7VwYWf+JpaDwADQIrZ155136rLLLtOCBQs0PDysG264QRs2bKi6tFERAADQQmeccYYuuugi3XrrrXr99de1dOlSnXLKKVWXNSoCAABa7KabbtK8efPU3d2tgYGBqss5JAIAAFpsypQpuvzyy3Xcccdp8uTJVZdzSBwEBoASTJgwQRMmdPZHbGdXBwAoDQEAAElxDAAASnDzzTdXXUJTjAAAICkCAACSIgAAICkCAACSIgAAICkCAACS4jRQADjIWdfd29L1Da5eOqblNmzYoGuvvVbDw8O66qqrtHLlypbWcTBGAADQAYaHh3X11Vdr/fr12rp1q9asWaOtW7eWuk0CAAA6wKZNm3Tqqadqzpw56u7u1uLFi7V27dpSt0kAAEAH2LVrl2bNmrV/ularadeuXaVukwAAgA4QEe9oK/sf1RMAANABarWadu7cuX96aGhIM2fOLHWbBAAAdICzzz5b27dv13PPPac333xT9913ny6++OJSt8lpoABwkLGettlKkyZN0h133KELL7xQw8PDWrZsmebOnVvuNktdOwBgzBYtWqRFixa1bXvsAgKApAgAAEiKAACApAgAAEiKAACApAgAAEiK00AB4CAv3PLBlq7v5Bs3N11m2bJlWrdunWbMmKEtW7a0dPuHwggAADrAFVdcoQ0bNrR1mwQAAHSA8847T9OmTWvrNgkAAEiKAACApAgAAEiKAACApDrqNNDuE+fq5BsHqi4DQHJjOW2z1ZYsWaLHHntMe/bsUa1W06pVq7R8+fJSt9lRAQAAWa1Zs6bt22QXEAAkRQAAQFIEAABIioiqSzisMuojAACk19PTo71793ZsCESE9u7dq56enpaul4PAANKr1WoaGhrSyy+/XHUph9TT06NardbSdRIAANLr6urS7Nmzqy6j7dgFBABJEQAAkBQBAABJuZOOett+TdIzVdfRAaZL2lN1ER2CvjiAvqijHw6YLmlKRJxwNE/utIPAz0REf9VFVM32AP1QR18cQF/U0Q8HFH3Rd7TPZxcQACRFAABAUp0WAHdVXUCHoB8OoC8OoC/q6IcD3lVfdNRBYABA+3TaCAAA0CYEAAAk1REBYHuh7Wds77C9sup6ymb7btu7bW9paJtm+2Hb24v73y7abfv2om9+antedZW3lu1Zth+1vc3207avLdoz9kWP7U22nyr6YlXRPtv2j4u++Efb3UX75GJ6RzG/r8r6W832RNtP2F5XTGfth+dtb7b9pO2Boq1l74/KA8D2RElfk/RpSadLWmL79GqrKt09khYe1LZS0saIOE3SxmJaqvfLacVthaSvt6nGdnhb0hci4gOSzpV0dfG3z9gXb0i6ICI+LOlMSQttnyvpVklfLvriV5JG/knsckm/iohTJX25WO5Ycq2kbQ3TWftBkhZExJkNv31o3fsjIiq9SfqYpIcapq+XdH3VdbXhdfdJ2tIw/YykE4vHJ6r+ozhJ+oakJaMtd6zdJK2V9MnsfSHpvZJ+Iukc1X/xOqlo3/9ekfSQpI8VjycVy7nq2lv0+mvFB9sFktZJcsZ+KF7T85KmH9TWsvdH5SMASSdJ2tkwPVS0ZfM7EfGSJBX3M4r2FP1TDN0/IunHStoXxW6PJyXtlvSwpJ9L+nVEvF0s0vh69/dFMf9VSb3trbg0X5H0RUm/KaZ7lbMfJCkk/cD2oO0VRVvL3h+dcCkIj9LGuakHHPP9Y/s4Sf8s6fMR8T/2aC+5vugobcdMX0TEsKQzbb9P0gOSPjDaYsX9MdkXtj8jaXdEDNo+f6R5lEWP6X5o8PGIeNH2DEkP2/7ZYZY94r7ohBHAkKRZDdM1SS9WVEuV/tv2iZJU3O8u2o/p/rHdpfqH/3ci4ntFc8q+GBERv5b0mOrHRd5ne+SLWuPr3d8XxfzjJb3S3kpL8XFJF9t+XtJ9qu8G+ory9YMkKSJeLO53q/6l4KNq4fujEwLgcUmnFUf5uyUtlvRgxTVV4UFJnysef071/eEj7UuLI/znSnp1ZPg33rn+Vf/vJW2LiNsaZmXsixOKb/6y/R5Jf6j6QdBHJV1aLHZwX4z00aWSHolix+94FhHXR0Qt6hc4W6z66/qskvWDJNmeYnvqyGNJn5K0Ra18f1R9kKP4Wy2S9F+q7/O8oep62vB610h6SdJbqqf2ctX3W26UtL24n1Ysa9XPkvq5pM2S+quuv4X9MF/1IepPJT1Z3BYl7YsPSXqi6Istkm4s2udI2iRph6R/kjS5aO8ppncU8+dU/RpK6JPzJa3L2g/Fa36quD098tnYyvcHl4IAgKQ6YRcQAKACBAAAJEUAAEBSBAAAJEUAAEBSBADQQrY/b/u9VdcBjAWngQItVPyCtT8i9lRdC9AMIwCkY3tpcb30p2x/2/b7bW8s2jbaPrlY7h7blzY873+L+/NtP2b7u7Z/Zvs7xa8vr5E0U9Kjth+t5tUBY9cJF4MD2sb2XEk3qH6RrT22p0n6lqR7I+JbtpdJul3SHzVZ1UckzVX9Wiv/Uazvdtt/qfr12xkBoOMxAkA2F0j67sgHdES8ovr15f+hmP9t1S9R0cymiBiKiN+ofgmLvhJqBUpFACAbq/nlgkfmv63iPVJcuK67YZk3Gh4Pi9E0xiECANlslPSntnul+v9XlfQj1a88KUmflfTD4vHzks4qHl8iqWsM639N0tRWFQuUiW8tSCUinrb9JUn/ZntY9StwXiPpbtvXSXpZ0pXF4n8raa3tTaoHx+tj2MRdktbbfikiFrT+FQCtw2mgAJAUu4AAICkCAACSIgAAICkCAACSIgAAICkCAACSIgAAIKn/B0aCM3bdzMAOAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(y='isChild', hue='Y', data=dtf,)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### YOUR Answer HERE .. \n",
    "we notice that about half of the kids died,\n",
    "but only about 25% of the females died\n",
    "It's save the Woman not the children :("
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Wealth? Ticket, Fare\n",
    "are rich people saved first?\n",
    "make the same analysis done above on these features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Y</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>isChild</th>\n",
       "      <th>isRich</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Mr</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Miss</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Mr</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Mr</td>\n",
       "      <td>male</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330877</td>\n",
       "      <td>8.4583</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Mr</td>\n",
       "      <td>male</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>17463</td>\n",
       "      <td>51.8625</td>\n",
       "      <td>E46</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Master</td>\n",
       "      <td>male</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>349909</td>\n",
       "      <td>21.0750</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>female</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>347742</td>\n",
       "      <td>11.1333</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>female</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>237736</td>\n",
       "      <td>30.0708</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Miss</td>\n",
       "      <td>female</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>PP 9549</td>\n",
       "      <td>16.7000</td>\n",
       "      <td>G6</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Miss</td>\n",
       "      <td>female</td>\n",
       "      <td>58.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>113783</td>\n",
       "      <td>26.5500</td>\n",
       "      <td>C103</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Mr</td>\n",
       "      <td>male</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5. 2151</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Mr</td>\n",
       "      <td>male</td>\n",
       "      <td>39.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>347082</td>\n",
       "      <td>31.2750</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Miss</td>\n",
       "      <td>female</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>350406</td>\n",
       "      <td>7.8542</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>female</td>\n",
       "      <td>55.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>248706</td>\n",
       "      <td>16.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Master</td>\n",
       "      <td>male</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>382652</td>\n",
       "      <td>29.1250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Mr</td>\n",
       "      <td>male</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>244373</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>female</td>\n",
       "      <td>31.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>345763</td>\n",
       "      <td>18.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2649</td>\n",
       "      <td>7.2250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Mr</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>239865</td>\n",
       "      <td>26.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Mr</td>\n",
       "      <td>male</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>248698</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>D56</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Miss</td>\n",
       "      <td>female</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330923</td>\n",
       "      <td>8.0292</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Mr</td>\n",
       "      <td>male</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>113788</td>\n",
       "      <td>35.5000</td>\n",
       "      <td>A6</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Miss</td>\n",
       "      <td>female</td>\n",
       "      <td>8.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>349909</td>\n",
       "      <td>21.0750</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>347077</td>\n",
       "      <td>31.3875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Mr</td>\n",
       "      <td>male</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2631</td>\n",
       "      <td>7.2250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Mr</td>\n",
       "      <td>male</td>\n",
       "      <td>19.0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>19950</td>\n",
       "      <td>263.0000</td>\n",
       "      <td>C23 C25 C27</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Miss</td>\n",
       "      <td>female</td>\n",
       "      <td>21.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330959</td>\n",
       "      <td>7.8792</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Mr</td>\n",
       "      <td>male</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>349216</td>\n",
       "      <td>7.8958</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>862</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Mr</td>\n",
       "      <td>male</td>\n",
       "      <td>21.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>28134</td>\n",
       "      <td>11.5000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>863</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>female</td>\n",
       "      <td>48.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>17466</td>\n",
       "      <td>25.9292</td>\n",
       "      <td>D17</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>864</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Miss</td>\n",
       "      <td>female</td>\n",
       "      <td>21.0</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>CA. 2343</td>\n",
       "      <td>69.5500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>865</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Mr</td>\n",
       "      <td>male</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>233866</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>866</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>female</td>\n",
       "      <td>42.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>236852</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>867</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Miss</td>\n",
       "      <td>female</td>\n",
       "      <td>27.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>SC/PARIS 2149</td>\n",
       "      <td>13.8583</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>868</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Mr</td>\n",
       "      <td>male</td>\n",
       "      <td>31.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17590</td>\n",
       "      <td>50.4958</td>\n",
       "      <td>A24</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>869</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Mr</td>\n",
       "      <td>male</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>345777</td>\n",
       "      <td>9.5000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>870</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Master</td>\n",
       "      <td>male</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>347742</td>\n",
       "      <td>11.1333</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>871</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Mr</td>\n",
       "      <td>male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>349248</td>\n",
       "      <td>7.8958</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>872</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>female</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>11751</td>\n",
       "      <td>52.5542</td>\n",
       "      <td>D35</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>873</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Mr</td>\n",
       "      <td>male</td>\n",
       "      <td>33.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>695</td>\n",
       "      <td>5.0000</td>\n",
       "      <td>B51 B53 B55</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>874</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Mr</td>\n",
       "      <td>male</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>345765</td>\n",
       "      <td>9.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>875</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>female</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>P/PP 3381</td>\n",
       "      <td>24.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>876</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Miss</td>\n",
       "      <td>female</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2667</td>\n",
       "      <td>7.2250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>877</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Mr</td>\n",
       "      <td>male</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7534</td>\n",
       "      <td>9.8458</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>878</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Mr</td>\n",
       "      <td>male</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>349212</td>\n",
       "      <td>7.8958</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>879</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Mr</td>\n",
       "      <td>male</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>349217</td>\n",
       "      <td>7.8958</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>880</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>female</td>\n",
       "      <td>56.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>11767</td>\n",
       "      <td>83.1583</td>\n",
       "      <td>C50</td>\n",
       "      <td>C</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>881</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>female</td>\n",
       "      <td>25.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>230433</td>\n",
       "      <td>26.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>882</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Mr</td>\n",
       "      <td>male</td>\n",
       "      <td>33.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>349257</td>\n",
       "      <td>7.8958</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>883</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Miss</td>\n",
       "      <td>female</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7552</td>\n",
       "      <td>10.5167</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>884</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Mr</td>\n",
       "      <td>male</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>C.A./SOTON 34068</td>\n",
       "      <td>10.5000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>885</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Mr</td>\n",
       "      <td>male</td>\n",
       "      <td>25.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>SOTON/OQ 392076</td>\n",
       "      <td>7.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>female</td>\n",
       "      <td>39.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>382652</td>\n",
       "      <td>29.1250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Rev</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>211536</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Miss</td>\n",
       "      <td>female</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>112053</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>B42</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Miss</td>\n",
       "      <td>female</td>\n",
       "      <td>21.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>W./C. 6607</td>\n",
       "      <td>23.4500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Mr</td>\n",
       "      <td>male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>111369</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>C148</td>\n",
       "      <td>C</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>891</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Mr</td>\n",
       "      <td>male</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>370376</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             Y  Pclass    Name     Sex   Age  SibSp  Parch            Ticket  \\\n",
       "PassengerId                                                                    \n",
       "1            0       3      Mr    male  22.0      1      0         A/5 21171   \n",
       "2            1       1     Mrs  female  38.0      1      0          PC 17599   \n",
       "3            1       3    Miss  female  26.0      0      0  STON/O2. 3101282   \n",
       "4            1       1     Mrs  female  35.0      1      0            113803   \n",
       "5            0       3      Mr    male  35.0      0      0            373450   \n",
       "6            0       3      Mr    male  30.0      0      0            330877   \n",
       "7            0       1      Mr    male  54.0      0      0             17463   \n",
       "8            0       3  Master    male   2.0      3      1            349909   \n",
       "9            1       3     Mrs  female  27.0      0      2            347742   \n",
       "10           1       2     Mrs  female  14.0      1      0            237736   \n",
       "11           1       3    Miss  female   4.0      1      1           PP 9549   \n",
       "12           1       1    Miss  female  58.0      0      0            113783   \n",
       "13           0       3      Mr    male  20.0      0      0         A/5. 2151   \n",
       "14           0       3      Mr    male  39.0      1      5            347082   \n",
       "15           0       3    Miss  female  14.0      0      0            350406   \n",
       "16           1       2     Mrs  female  55.0      0      0            248706   \n",
       "17           0       3  Master    male   2.0      4      1            382652   \n",
       "18           1       2      Mr    male  30.0      0      0            244373   \n",
       "19           0       3     Mrs  female  31.0      1      0            345763   \n",
       "20           1       3     Mrs  female  35.0      0      0              2649   \n",
       "21           0       2      Mr    male  35.0      0      0            239865   \n",
       "22           1       2      Mr    male  34.0      0      0            248698   \n",
       "23           1       3    Miss  female  15.0      0      0            330923   \n",
       "24           1       1      Mr    male  28.0      0      0            113788   \n",
       "25           0       3    Miss  female   8.0      3      1            349909   \n",
       "26           1       3     Mrs  female  38.0      1      5            347077   \n",
       "27           0       3      Mr    male  30.0      0      0              2631   \n",
       "28           0       1      Mr    male  19.0      3      2             19950   \n",
       "29           1       3    Miss  female  21.0      0      0            330959   \n",
       "30           0       3      Mr    male  30.0      0      0            349216   \n",
       "...         ..     ...     ...     ...   ...    ...    ...               ...   \n",
       "862          0       2      Mr    male  21.0      1      0             28134   \n",
       "863          1       1     Mrs  female  48.0      0      0             17466   \n",
       "864          0       3    Miss  female  21.0      8      2          CA. 2343   \n",
       "865          0       2      Mr    male  24.0      0      0            233866   \n",
       "866          1       2     Mrs  female  42.0      0      0            236852   \n",
       "867          1       2    Miss  female  27.0      1      0     SC/PARIS 2149   \n",
       "868          0       1      Mr    male  31.0      0      0          PC 17590   \n",
       "869          0       3      Mr    male  30.0      0      0            345777   \n",
       "870          1       3  Master    male   4.0      1      1            347742   \n",
       "871          0       3      Mr    male  26.0      0      0            349248   \n",
       "872          1       1     Mrs  female  47.0      1      1             11751   \n",
       "873          0       1      Mr    male  33.0      0      0               695   \n",
       "874          0       3      Mr    male  47.0      0      0            345765   \n",
       "875          1       2     Mrs  female  28.0      1      0         P/PP 3381   \n",
       "876          1       3    Miss  female  15.0      0      0              2667   \n",
       "877          0       3      Mr    male  20.0      0      0              7534   \n",
       "878          0       3      Mr    male  19.0      0      0            349212   \n",
       "879          0       3      Mr    male  30.0      0      0            349217   \n",
       "880          1       1     Mrs  female  56.0      0      1             11767   \n",
       "881          1       2     Mrs  female  25.0      0      1            230433   \n",
       "882          0       3      Mr    male  33.0      0      0            349257   \n",
       "883          0       3    Miss  female  22.0      0      0              7552   \n",
       "884          0       2      Mr    male  28.0      0      0  C.A./SOTON 34068   \n",
       "885          0       3      Mr    male  25.0      0      0   SOTON/OQ 392076   \n",
       "886          0       3     Mrs  female  39.0      0      5            382652   \n",
       "887          0       2     Rev    male  27.0      0      0            211536   \n",
       "888          1       1    Miss  female  19.0      0      0            112053   \n",
       "889          0       3    Miss  female  21.0      1      2        W./C. 6607   \n",
       "890          1       1      Mr    male  26.0      0      0            111369   \n",
       "891          0       3      Mr    male  32.0      0      0            370376   \n",
       "\n",
       "                 Fare        Cabin Embarked  isChild  isRich  \n",
       "PassengerId                                                   \n",
       "1              7.2500          NaN        S        0       0  \n",
       "2             71.2833          C85        C        0       1  \n",
       "3              7.9250          NaN        S        0       0  \n",
       "4             53.1000         C123        S        0       1  \n",
       "5              8.0500          NaN        S        0       0  \n",
       "6              8.4583          NaN        Q        0       0  \n",
       "7             51.8625          E46        S        0       1  \n",
       "8             21.0750          NaN        S        1       0  \n",
       "9             11.1333          NaN        S        0       0  \n",
       "10            30.0708          NaN        C        1       0  \n",
       "11            16.7000           G6        S        1       0  \n",
       "12            26.5500         C103        S        0       0  \n",
       "13             8.0500          NaN        S        0       0  \n",
       "14            31.2750          NaN        S        0       0  \n",
       "15             7.8542          NaN        S        1       0  \n",
       "16            16.0000          NaN        S        0       0  \n",
       "17            29.1250          NaN        Q        1       0  \n",
       "18            13.0000          NaN        S        0       0  \n",
       "19            18.0000          NaN        S        0       0  \n",
       "20             7.2250          NaN        C        0       0  \n",
       "21            26.0000          NaN        S        0       0  \n",
       "22            13.0000          D56        S        0       0  \n",
       "23             8.0292          NaN        Q        1       0  \n",
       "24            35.5000           A6        S        0       1  \n",
       "25            21.0750          NaN        S        1       0  \n",
       "26            31.3875          NaN        S        0       0  \n",
       "27             7.2250          NaN        C        0       0  \n",
       "28           263.0000  C23 C25 C27        S        0       1  \n",
       "29             7.8792          NaN        Q        0       0  \n",
       "30             7.8958          NaN        S        0       0  \n",
       "...               ...          ...      ...      ...     ...  \n",
       "862           11.5000          NaN        S        0       0  \n",
       "863           25.9292          D17        S        0       0  \n",
       "864           69.5500          NaN        S        0       1  \n",
       "865           13.0000          NaN        S        0       0  \n",
       "866           13.0000          NaN        S        0       0  \n",
       "867           13.8583          NaN        C        0       0  \n",
       "868           50.4958          A24        S        0       1  \n",
       "869            9.5000          NaN        S        0       0  \n",
       "870           11.1333          NaN        S        1       0  \n",
       "871            7.8958          NaN        S        0       0  \n",
       "872           52.5542          D35        S        0       1  \n",
       "873            5.0000  B51 B53 B55        S        0       0  \n",
       "874            9.0000          NaN        S        0       0  \n",
       "875           24.0000          NaN        C        0       0  \n",
       "876            7.2250          NaN        C        1       0  \n",
       "877            9.8458          NaN        S        0       0  \n",
       "878            7.8958          NaN        S        0       0  \n",
       "879            7.8958          NaN        S        0       0  \n",
       "880           83.1583          C50        C        0       1  \n",
       "881           26.0000          NaN        S        0       0  \n",
       "882            7.8958          NaN        S        0       0  \n",
       "883           10.5167          NaN        S        0       0  \n",
       "884           10.5000          NaN        S        0       0  \n",
       "885            7.0500          NaN        S        0       0  \n",
       "886           29.1250          NaN        Q        0       0  \n",
       "887           13.0000          NaN        S        0       0  \n",
       "888           30.0000          B42        S        0       0  \n",
       "889           23.4500          NaN        S        0       0  \n",
       "890           30.0000         C148        C        0       0  \n",
       "891            7.7500          NaN        Q        0       0  \n",
       "\n",
       "[891 rows x 13 columns]"
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# iam gonna try to make rich feature using the ticket fare\n",
    "lis = []\n",
    "for item in dtf['Fare']:\n",
    "    if item > dtf['Fare'].mean() :\n",
    "        lis.append(1)\n",
    "    else:\n",
    "        lis.append(0)\n",
    "        \n",
    "dtf['isRich'] = lis\n",
    "dtf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x223d3d1a8d0>"
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# YOUR Answer HERE .. \n",
    "sns.countplot(y='isRich', hue='Y', data=dtf,)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "from the above chart we notice that more than ~70% of the rich people survived,\n",
    "and only ~35% of the normal people survived"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feature Engineering\n",
    "It’s time to create new features from raw data using domain knowledge. I will provide one example: Let us ll try to create a useful feature by extracting information from the Cabin column. I’m assuming that the letter at the beginning of each cabin number (i.e. “B96”) indicates some the section. lets make a new feature called section taking only the first letter (We can drop the \"Cabin_section\" column later."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "*******Count********\n",
      "Y           891\n",
      "Pclass      891\n",
      "Name        891\n",
      "Sex         891\n",
      "Age         891\n",
      "SibSp       891\n",
      "Parch       891\n",
      "Ticket      891\n",
      "Fare        891\n",
      "Cabin       204\n",
      "Embarked    891\n",
      "isChild     891\n",
      "isRich      891\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print (\"\\n*******Count********\")\n",
    "print (dtf.count())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### i think the passengers with same class my be in the same section\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Create new column\n",
    "dtf['Cabin'].fillna(-1,inplace=True)\n",
    "dtf[\"Cabin_section\"] = dtf[\"Cabin\"].apply(lambda x: str(x)[0])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "what are the features that you think are useless or bad? why?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# YOUR Answer HERE ..\n",
    "mostly Name,Ticket,PasenggerId,Cabin_section and Cabin"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "remove them from your data frame, keep only good features\n",
    "remember you can seletct colums from dataframe by specifing there names\n",
    "example: new_df = dtf[[\"Age\", \"Sex\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Y</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>isChild</th>\n",
       "      <th>isRich</th>\n",
       "      <th>Cabin_section</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Mr</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>-1</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Miss</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>-1</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Mr</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>-1</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Y  Pclass  Name     Sex   Age  SibSp  Parch            Ticket  \\\n",
       "PassengerId                                                                  \n",
       "1            0       3    Mr    male  22.0      1      0         A/5 21171   \n",
       "2            1       1   Mrs  female  38.0      1      0          PC 17599   \n",
       "3            1       3  Miss  female  26.0      0      0  STON/O2. 3101282   \n",
       "4            1       1   Mrs  female  35.0      1      0            113803   \n",
       "5            0       3    Mr    male  35.0      0      0            373450   \n",
       "\n",
       "                Fare Cabin Embarked  isChild  isRich Cabin_section  \n",
       "PassengerId                                                         \n",
       "1             7.2500    -1        S        0       0             -  \n",
       "2            71.2833   C85        C        0       1             C  \n",
       "3             7.9250    -1        S        0       0             -  \n",
       "4            53.1000  C123        S        0       1             C  \n",
       "5             8.0500    -1        S        0       0             -  "
      ]
     },
     "execution_count": 187,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(dtf.corr(),cmap='coolwarm')\n",
    "dtf.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### We notice that there is no high colloration between the columns, only the Fare and the isRich and that make sence"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Y</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>isChild</th>\n",
       "      <th>isRich</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Y  Pclass     Sex   Age  SibSp  Parch     Fare Embarked  isChild  \\\n",
       "PassengerId                                                                     \n",
       "1            0       3    male  22.0      1      0   7.2500        S        0   \n",
       "2            1       1  female  38.0      1      0  71.2833        C        0   \n",
       "3            1       3  female  26.0      0      0   7.9250        S        0   \n",
       "4            1       1  female  35.0      1      0  53.1000        S        0   \n",
       "5            0       3    male  35.0      0      0   8.0500        S        0   \n",
       "\n",
       "             isRich  \n",
       "PassengerId          \n",
       "1                 0  \n",
       "2                 1  \n",
       "3                 0  \n",
       "4                 1  \n",
       "5                 0  "
      ]
     },
     "execution_count": 221,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# YOUR CODE HERE ..\n",
    "\n",
    "newDtf = dtf[[\"Y\",\"Pclass\",\"Sex\",\"Age\",\"SibSp\",\"Parch\",\"Fare\",\"Embarked\",\"isChild\",\"isRich\"]]\n",
    "\n",
    "newDtf.head()\n",
    "# \tY\tPclass\tName\tSex\tAge\tSibSp\tParch\tTicket\tFare\tCabin\tEmbarked\tisChild\tisRich\tCabin_section"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## some preprocess for me"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [],
   "source": [
    "# male: 0 , female: 1\n",
    "lis = []\n",
    "for item in newDtf['Sex']:\n",
    "    if item == 'male':\n",
    "        lis.append(0)\n",
    "    else:\n",
    "        lis.append(1)\n",
    "newDtf['Sex'] = lis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Y</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>isChild</th>\n",
       "      <th>isRich</th>\n",
       "      <th>TravelAlone</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>38.0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>26.0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Y  Pclass  Sex   Age     Fare Embarked  isChild  isRich  \\\n",
       "PassengerId                                                            \n",
       "1            0       3    0  22.0   7.2500        S        0       0   \n",
       "2            1       1    1  38.0  71.2833        C        0       1   \n",
       "3            1       3    1  26.0   7.9250        S        0       0   \n",
       "4            1       1    1  35.0  53.1000        S        0       1   \n",
       "5            0       3    0  35.0   8.0500        S        0       0   \n",
       "\n",
       "             TravelAlone  \n",
       "PassengerId               \n",
       "1                      0  \n",
       "2                      0  \n",
       "3                      1  \n",
       "4                      0  \n",
       "5                      1  "
      ]
     },
     "execution_count": 223,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# since we dont care if he is traveling with sibling or parent iam gonna make them one feature\n",
    "travelBuds =newDtf[\"SibSp\"]+newDtf[\"Parch\"]\n",
    "newDtf['TravelAlone']=np.where(travelBuds >0, 0, 1)\n",
    "\n",
    "newDtf.drop('SibSp', axis=1, inplace=True)\n",
    "newDtf.drop('Parch', axis=1, inplace=True)\n",
    "newDtf.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Summary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Y              0\n",
      "Pclass         0\n",
      "Sex            0\n",
      "Age            0\n",
      "Fare           0\n",
      "Embarked       0\n",
      "isChild        0\n",
      "isRich         0\n",
      "TravelAlone    0\n",
      "dtype: int64\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Y</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>isChild</th>\n",
       "      <th>isRich</th>\n",
       "      <th>TravelAlone</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>38.0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>26.0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Y  Pclass  Sex   Age     Fare Embarked  isChild  isRich  \\\n",
       "PassengerId                                                            \n",
       "1            0       3    0  22.0   7.2500        S        0       0   \n",
       "2            1       1    1  38.0  71.2833        C        0       1   \n",
       "3            1       3    1  26.0   7.9250        S        0       0   \n",
       "4            1       1    1  35.0  53.1000        S        0       1   \n",
       "5            0       3    0  35.0   8.0500        S        0       0   \n",
       "\n",
       "             TravelAlone  \n",
       "PassengerId               \n",
       "1                      0  \n",
       "2                      0  \n",
       "3                      1  \n",
       "4                      0  \n",
       "5                      1  "
      ]
     },
     "execution_count": 224,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(newDtf.corr(),cmap='coolwarm')\n",
    "print(pd.isna(newDtf).sum())\n",
    "newDtf.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### new the data is ready to train and the ML things:)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Now let's get our `X` and `y` numpy arries to use them for training***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X.shape: (891, 13)  y.shape: (891,)\n",
      "features names: ['Y', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked', 'isChild', 'isRich', 'Cabin_section']\n",
      "target names: [0 1] \n",
      "X.shape: (891, 8)  y.shape: (891,)\n",
      "features names: ['Y', 'Pclass', 'Sex', 'Age', 'Fare', 'Embarked', 'isChild', 'isRich', 'TravelAlone']\n",
      "target names: [0 1] \n"
     ]
    }
   ],
   "source": [
    "# Your code here\n",
    "encoded_data = newDtf\n",
    "# features = encoded_data.loc[:,'from_feature???':'to_feature????']\n",
    "# target = encoded_data.loc[:,'target_feature???']\n",
    "\n",
    "features = dtf.loc[:,'Pclass':'Cabin_section']\n",
    "target = dtf.loc[:,'Y']\n",
    "X_unprocessed = features.values\n",
    "y_unprocessed = target.values\n",
    "\n",
    "target_names = dtf.Y.unique()\n",
    "features_names = dtf.columns\n",
    "#####################\n",
    "features1 = encoded_data.loc[:,'Pclass':'TravelAlone']\n",
    "target1 = encoded_data.loc[:,'Y']\n",
    "\n",
    "X_processed = features1.values\n",
    "y_processed = target1.values\n",
    "\n",
    "target_names1 = encoded_data.Y.unique()\n",
    "features_names1 = encoded_data.columns\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "print(\"X.shape: {}  y.shape: {}\".format(X_unprocessed.shape, y_unprocessed.shape))\n",
    "\n",
    "print(\"features names: {}\".format(list(features_names)))\n",
    "print(\"target names: {} \".format(target_names))\n",
    "\n",
    "\n",
    "print(\"X.shape: {}  y.shape: {}\".format(X_processed.shape, y_processed.shape))\n",
    "\n",
    "print(\"features names: {}\".format(list(features_names1)))\n",
    "print(\"target names: {} \".format(target_names1))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2 - Preprocessing\n",
    "Data preprocessing is the phase of preparing the raw data to make it suitable for a machine learning model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# IMPORTANT NOTE\n",
    "use Piplines to each step"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### To do:\n",
    "- Treat missings\n",
    "- Encode categorical data\n",
    "- Scaling\n",
    "- Dataset split"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Missing values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Drop nan values or replace missing values with values useing `Imputer`, with a strategy of your choise (`mean`, `median`,...)  and explain which is better"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# YOUR CODE HERE .. \n",
    "Already handeled the NaN in above sections search for it"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Categorical Encoding"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use `sklearn.preprocessing.OneHotEncoder` or `sklearn.preprocessing.OneHotEncoder` to encode categorical features.\n",
    "and then compare them and explain why Label encoder is not good\n",
    "\n",
    "***Encode your data***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[3 0 35.0 8.05 'S' 0 0 1]\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x223d5ee5e48>"
      ]
     },
     "execution_count": 216,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# YOUR CODE HERE .. \n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "labelencoder_Y = LabelEncoder()\n",
    "Y = labelencoder_Y.fit_transform(encoded_data['Embarked'])\n",
    "encoded_data2  = encoded_data\n",
    "encoded_data2['Embarked']=Y\n",
    "encoded_data2.Embarked.value_counts().plot(kind='bar')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### since the labelEncoder gives 2 to the most common 'S' value \n",
    "it will make the data impalanced with high rates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Y</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>isChild</th>\n",
       "      <th>isRich</th>\n",
       "      <th>TravelAlone</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PassengerId</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>38.0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>26.0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Y  Pclass  Sex   Age     Fare  Embarked  isChild  isRich  \\\n",
       "PassengerId                                                             \n",
       "1            0       3    0  22.0   7.2500         1        0       0   \n",
       "2            1       1    1  38.0  71.2833         2        0       1   \n",
       "3            1       3    1  26.0   7.9250         1        0       0   \n",
       "4            1       1    1  35.0  53.1000         1        0       1   \n",
       "5            0       3    0  35.0   8.0500         1        0       0   \n",
       "\n",
       "             TravelAlone  \n",
       "PassengerId               \n",
       "1                      0  \n",
       "2                      0  \n",
       "3                      1  \n",
       "4                      0  \n",
       "5                      1  "
      ]
     },
     "execution_count": 227,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# for the Embarked column \n",
    "# since S is the most frequent iam gonna  give it the less number and so on\n",
    "lis= [] \n",
    "for item in encoded_data['Embarked']:\n",
    "    if item == 'S':\n",
    "        lis.append(1)\n",
    "    elif item == 'C':\n",
    "        lis.append(2)\n",
    "    else:\n",
    "        lis.append(3)\n",
    "encoded_data['Embarked']=lis\n",
    "encoded_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X.shape: (891, 8)  y.shape: (891,)\n",
      "features names: ['Y', 'Pclass', 'Sex', 'Age', 'Fare', 'Embarked', 'isChild', 'isRich', 'TravelAlone']\n",
      "target names: [0 1] \n"
     ]
    }
   ],
   "source": [
    "features1 = encoded_data.loc[:,'Pclass':'TravelAlone']\n",
    "target1 = encoded_data.loc[:,'Y']\n",
    "\n",
    "X_processed = features1.values\n",
    "y_processed = target1.values\n",
    "\n",
    "target_names1 = encoded_data.Y.unique()\n",
    "features_names1 = encoded_data.columns\n",
    "\n",
    "print(\"X.shape: {}  y.shape: {}\".format(X_processed.shape, y_processed.shape))\n",
    "\n",
    "print(\"features names: {}\".format(list(features_names1)))\n",
    "print(\"target names: {} \".format(target_names1))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 3.  ,  0.  , 22.  ,  7.25,  1.  ,  0.  ,  0.  ,  0.  ])"
      ]
     },
     "execution_count": 232,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "X_processed[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Scaling"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Feature Scaling***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "****Use Feature scaling to standardize the range of features of your data.****\n",
    "\n",
    "*choose one method of scaling *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler,RobustScaler, MinMaxScaler,  Normalizer\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "sc = StandardScaler()\n",
    "X_processed = sc.fit_transform(X_processed)\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Spliting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split \n",
    "# YOUR CODE HERE .. \n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_processed, y_processed, test_size=0.25,\n",
    "                                                    random_state=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3 - Model Selection & Feature Selection"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Plan:\n",
    " 1- build baseline model\n",
    " \n",
    " 2-  Feature Selection: \n",
    "\n",
    "     by correlation, by importance\n",
    " 3-  Model selecion (Choosing a classifier) : \n",
    "\n",
    "     try differnt classification methods (single classifiers as well as ensemble ones) and print thier auc socre\n",
    "     use grid search to find the best paramters for the model (the whole pipline) that give you good results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Baseline model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***implement `train_and_test` that trains and tests the dataset with features X and target y, using classifier***\n",
    "- train classifer on training data\n",
    "- predict on testing data\n",
    "- print confution matirx\n",
    "- print accuracy score\n",
    "- print roc auc (use Target score as probability estimates of the positive class (classifier.predict_proba(X_test)[:,1]), instead of decision_function)\n",
    "- print classification report\n",
    "- print roc curve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import roc_auc_score, roc_curve\n",
    "from sklearn.metrics import classification_report\n",
    "\n",
    "\n",
    "def train_and_test(classifier, X_train, X_test, y_train, y_test):\n",
    "    classifier.fit(X_train, y_train)\n",
    "    y_pred = classifier.predict(X_test)\n",
    "    y_score = classifier.predict_proba(X_test)[:,1]\n",
    "    \n",
    "    fpr, tpr, _ = roc_curve(y_test, y_score)\n",
    "    \n",
    "    accuracy = accuracy_score(y_test, y_pred)\n",
    "    roc_auc = roc_auc_score(fpr, tpr)\n",
    "    classification_rep =classification_report(y_test, y_pred, target_names=['~surv', 'surv'])\n",
    "    con_matrix =confusion = confusion_matrix(y_test, y_pred)\n",
    "    \n",
    "\n",
    "    # ploting confustion matrix\n",
    "    plt.figure(figsize=(12,12))\n",
    "    plt.subplot(2,1,1)\n",
    "    sns.heatmap(con_matrix, annot=True, fmt=\"d\", xticklabels=target_names, yticklabels=target_names)\n",
    "    plt.ylabel(\"Real value\")\n",
    "    plt.xlabel(\"Predicted value\")\n",
    "    plt.show()\n",
    "\n",
    "    # print scores\n",
    "    print (\"accuracy  score: {} %\".format(accuracy))\n",
    "    print (\"auc  score: {} \".format(roc_auc))\n",
    "    print(classification_rep)\n",
    "\n",
    "    # print ROC curve\n",
    "    plt.figure()\n",
    "    plt.plot(fpr, tpr, color='darkorange',\n",
    "         lw=2, label='ROC curve (area = %0.2f)' % roc_auc)\n",
    "    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n",
    "    plt.xlim([0.0, 1.0])\n",
    "    plt.ylim([0.0, 1.05])\n",
    "    plt.xlabel('False Positive Rate')\n",
    "    plt.ylabel('True Positive Rate')\n",
    "    plt.title('Receiver operating characteristic example')\n",
    "    plt.legend(loc=\"lower right\")\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "baseline model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train set accurecy: 0.82 \n",
      "Test set accurecy: 0.78 \n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "lrclf = LogisticRegression()\n",
    "\n",
    "lrclf.fit(X_train,y_train)\n",
    "print (\"Train set accurecy: {:.2f} \".format(lrclf.score(X_train,y_train)))\n",
    "print (\"Test set accurecy: {:.2f} \".format(lrclf.score(X_test,y_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x864 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy  score: 0.5739910313901345 %\n",
      "auc  score: 1.0 \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "       ~surv       0.57      1.00      0.73       128\n",
      "        surv       0.00      0.00      0.00        95\n",
      "\n",
      "    accuracy                           0.57       223\n",
      "   macro avg       0.29      0.50      0.36       223\n",
      "weighted avg       0.33      0.57      0.42       223\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# YOUR CODE HERE .. \n",
    "# train_and_test(model, X_train, X_test, y_train, y_test)\n",
    "from sklearn.dummy import DummyClassifier\n",
    "dummy_majority = DummyClassifier(strategy = 'most_frequent')\n",
    "\n",
    "train_and_test(dummy_majority, X_train, X_test, y_train, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***How good is your classifier (compare precion and recall, comment on accuracy, roc and auc).***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Feature Selection"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Use Feature Selection to select relevant attributes from the set of features that you have***\n",
    "\n",
    "*choose a method that give you the best results, don't keep the code of other methodes that gave you less scores*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rf = RandomForestClassifier(n_estimators=60, random_state=42)\n",
    "params= {\n",
    "    'n_estimators': [100,150,175],\n",
    "    'max_features': ['auto', 'sqrt', 'log2']\n",
    "}\n",
    "grid = GridSearchCV(param_grid=params,estimator=rf,cv=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5,\n",
       "             estimator=RandomForestClassifier(n_estimators=60, random_state=42),\n",
       "             param_grid={'max_features': ['auto', 'sqrt', 'log2'],\n",
       "                         'n_estimators': [100, 150, 175]})"
      ]
     },
     "execution_count": 248,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RandomForestClassifier(max_features='log2', n_estimators=150, random_state=42)\n",
      "{'max_features': 'log2', 'n_estimators': 150}\n"
     ]
    }
   ],
   "source": [
    "print(grid.best_estimator_)\n",
    "print(grid.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(max_features='log2', n_estimators=150, random_state=42)"
      ]
     },
     "execution_count": 254,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "rf = grid.best_estimator_\n",
    "rf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train.shape: (668, 8)\n",
      "X_train_l1.shape: (668, 4)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "([], <a list of 0 Text yticklabel objects>)"
      ]
     },
     "execution_count": 256,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1152x144 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.feature_selection import SelectPercentile, VarianceThreshold, SelectFromModel, RFE\n",
    "\n",
    "\n",
    "# YOUR CODE HERE .. \n",
    "\n",
    "select = SelectFromModel(\n",
    "    RandomForestClassifier(n_estimators=150,max_features='log2', random_state=42),\n",
    "    threshold=\"median\")\n",
    "\n",
    "select.fit(X_train, y_train)\n",
    "X_train_l1 = select.transform(X_train)\n",
    "print(\"X_train.shape: {}\".format(X_train.shape))\n",
    "print(\"X_train_l1.shape: {}\".format(X_train_l1.shape))\n",
    "\n",
    "mask = select.get_support()\n",
    "# visualize the mask. black is True, white is False\n",
    "plt.matshow(mask.reshape(1, -1), cmap='gray_r')\n",
    "plt.xlabel(\"Sample index\")\n",
    "plt.yticks(())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***How many features are left after selection?***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# YOUR Answer HERE .. \n",
    "4 features left"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Does the model improve? why?***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test score: 0.574\n",
      "Train set accurecy: 0.79 \n",
      "Test set accurecy: 0.81 \n"
     ]
    }
   ],
   "source": [
    "# YOUR CODE HERE .. \n",
    "X_test_l1 = select.transform(X_test)\n",
    "\n",
    "score = dummy_majority.fit(X_train_l1, y_train).score(X_test_l1, y_test)\n",
    "print(\"Test score: {:.3f}\".format(score))\n",
    "\n",
    "\n",
    "\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "lrclf = LogisticRegression()\n",
    "\n",
    "lrclf.fit(X_train_l1,y_train)\n",
    "print (\"Train set accurecy: {:.2f} \".format(lrclf.score(X_train_l1,y_train)))\n",
    "print (\"Test set accurecy: {:.2f} \".format(lrclf.score(X_test_l1,y_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# YOUR Answer HERE .. \n",
    "yes beacause with the same LogisticRegression classfier we managed to get better test score with the half of the features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Model selecion (Choosing a classifier) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- ***wirte a 'lighter' of the function `train_and_test` that retuns the auc for a `classifer` given the dataset features `X` and targets `y` \n",
    "\n",
    "- ***use the above function to try differnt classification methods (single classifiers as well as ensemble ones) and print thier auc socre***\n",
    "- ***use grid search to find the best paramters for the model (the whole pipline) that give you good results***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# all your tryings here\n",
    "in the begin of the features selection section i tried a grid search on the RandomForest and managed to get the best model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello World! :)\n"
     ]
    }
   ],
   "source": [
    "# your best model here\n",
    "print(\"Hello World! :)\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***How to answer the question 'do you need more training data?, plot the curve you need to answer this question using your best model, according to this curve does the model overfits or underfits the data? why?'***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#your code here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#your answers here"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
